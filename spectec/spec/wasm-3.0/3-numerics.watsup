;;
;; Numerics
;;

;; Conversions

def $s33_to_u32(s33) : u32  hint(show %)


;; Signed numbers

def $signed(N, nat) : int       hint(show $signed_(%,%))
def $signed(N, i) = i           -- if $(0 <= 2^(N-1))
def $signed(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $invsigned(N, int) : nat    hint(show $signed^(-1)#_%#(%))
def $invsigned(N, i) = j        -- if $signed(N, j) = i


;; TODO

def $unop(numtype, unop_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#_%1#((%3)))
def $binop(numtype, binop_(numtype), num_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#_%1#(%3, %4))
def $testop(numtype, testop_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#_%1#((%3)))
def $relop(numtype, relop_(numtype), num_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#_%1#(%3, %4))
def $cvtop(numtype_1, numtype_2, cvtop, sx?, num_(numtype_1)) : num_(numtype_2)*
    hint(show %3#$_((%1,%2))^(%4)#((%5)))

def $wrap(M, N, iN(M)) : iN(N)                      hint(show $wrap_((%,%))#((%)))
def $ext(M, N, sx, iN(M)) : iN(N)                   hint(show $ext_((%,%))^(%)#((%)))
def $trunc(M, N, sx, fN(M)) : iN(N)                 hint(show $trunc_((%,%))^(%)#((%)))
def $trunc_sat(M, N, sx, fN(M)) : iN(N)             hint(show $trunc_sat_((%,%))^(%)#((%)))
def $demote(M, N, fN(M)) : fN(N)                    hint(show $demote_((%,%))#((%)))
def $promote(M, N, fN(M)) : fN(N)                   hint(show $promote_((%,%))#((%)))
def $convert(M, N, sx, iN(M)) : fN(N)               hint(show $convert_((%,%))^(%)#((%)))
def $narrow(M, N, sx, iN(M)) : iN(N)                hint(show $narrow_((%,%))^(%)#(%))
def $reinterpret(numtype_1, numtype_2, num_(numtype_1)) : num_(numtype_2)
    hint(show $narrow_((%,%))#(%))

def $ibits(N, iN(N)) : bit*                         hint(show $bits_(i#%,%))
def $fbits(N, fN(N)) : bit*                         hint(show $bits_(f#%,%))
def $ibytes(N, iN(N)) : byte*                       hint(show $bytes_(i#%,%))
def $fbytes(N, fN(N)) : byte*                       hint(show $bytes_(f#%,%))
def $nbytes(numtype, num_(numtype)) : byte*         hint(show $bytes_(%,%))
def $vbytes(vectype, vec_(vectype)) : byte*         hint(show $bytes_(%,%))
def $zbytes(storagetype, zval_(storagetype)) : byte*  hint(show $bytes_(%,%))


def $invibytes(N, byte*) : iN(N)
def $invfbytes(N, byte*) : fN(N)

def $invibytes(N, b*) = n  -- if $ibytes(N, n) = b*
def $invfbytes(N, b*) = p  -- if $fbytes(N, p) = b*


def $iadd(N, iN(N), iN(N)) : iN(N)      hint(show $iadd_%(%,%))
def $isub(N, iN(N), iN(N)) : iN(N)      hint(show $isub_%(%,%))
def $imul(N, iN(N), iN(N)) : iN(N)      hint(show $imul_%(%,%))
def $idiv(N, sx, iN(N), iN(N)) : iN(N)  hint(show $idiv_%^(%)(%,%))
def $irem(N, sx, iN(N), iN(N)) : iN(N)  hint(show $irem_%^(%)(%,%))
def $inot(N, iN(N)) : iN(N)             hint(show $inot_%(%))
def $iand(N, iN(N), iN(N)) : iN(N)      hint(show $iand_%(%,%))
def $iandnot(N, iN(N), iN(N)) : iN(N)   hint(show $inot_%(%,%))
def $ior(N, iN(N), iN(N)) : iN(N)       hint(show $ior_%(%,%))
def $ixor(N, iN(N), iN(N)) : iN(N)      hint(show $ixor_%(%,%))
def $ishl(N, iN(N), u32) : iN(N)        hint(show $ishl_%(%,%))
def $ishr(N, sx, iN(N), u32) : iN(N)    hint(show $ishr_%^(%)(%,%))
def $irotl(N, iN(N), iN(N)) : iN(N)     hint(show $irotl_%(%,%))
def $irotr(N, iN(N), iN(N)) : iN(N)     hint(show $irotr_%(%,%))
def $iclz(N, iN(N)) : iN(N)             hint(show $iclz_%(%))
def $ictz(N, iN(N)) : iN(N)             hint(show $iclz_%(%))
def $ipopcnt(N, iN(N)) : iN(N)          hint(show $ipopcnt_%(%))
def $ieqz(N, iN(N)) : u32               hint(show $ieqz_%(%))
def $ieq(N, iN(N), iN(N)) : u32         hint(show $ieq_%(%,%))
def $ine(N, iN(N), iN(N)) : u32         hint(show $ine_%(%,%))
def $ilt(N, sx, iN(N), iN(N)) : u32     hint(show $ilt_%^(%)(%,%))
def $igt(N, sx, iN(N), iN(N)) : u32     hint(show $igt_%^(%)(%,%))
def $ile(N, sx, iN(N), iN(N)) : u32     hint(show $ile_%^(%)(%,%))
def $ige(N, sx, iN(N), iN(N)) : u32     hint(show $ige_%^(%)(%,%))
def $ibitselect(N, iN(N), iN(N), iN(N)) : iN(N)
    hint(show $ibitselect_%(%,%,%))
def $iabs(N, iN(N)) : iN(N)             hint(show $iabs_%(%))
def $ineg(N, iN(N)) : iN(N)             hint(show $ineg_%(%))
def $imin(N, sx, iN(N), iN(N)) : iN(N)  hint(show $imin_%^(%)(%,%))
def $imax(N, sx, iN(N), iN(N)) : iN(N)  hint(show $imax_%^(%)(%,%))
def $iaddsat(N, sx, iN(N), iN(N)) : iN(N)  hint(show $iaddsat_%^(%)(%,%))
def $isubsat(N, sx, iN(N), iN(N)) : iN(N)  hint(show $isubsat_%^(%)(%,%))
def $iavgr_u(N, iN(N), iN(N)) : iN(N)   hint(show $iavgr_u_%(%,%))
def $iq15mulrsat_s(N, iN(N), iN(N)) : iN(N) hint(show $iq15mulrsat_s_%(%,%))

def $fadd(N, fN(N), fN(N)) : fN(N)      hint(show $fadd_%(%,%))
def $fsub(N, fN(N), fN(N)) : fN(N)      hint(show $fsub_%(%,%))
def $fmul(N, fN(N), fN(N)) : fN(N)      hint(show $fmul_%(%,%))
def $fdiv(N, fN(N), fN(N)) : fN(N)      hint(show $fdiv_%(%,%))
def $fmin(N, fN(N), fN(N)) : fN(N)      hint(show $fmin_%(%,%))
def $fmax(N, fN(N), fN(N)) : fN(N)      hint(show $fmax_%(%,%))
def $fcopysign(N, fN(N), fN(N)) : fN(N) hint(show $fcopysign_%(%,%))
def $fabs(N, fN(N)) : fN(N)             hint(show $fabs_%(%))
def $fneg(N, fN(N)) : fN(N)             hint(show $fneg_%(%))
def $fsqrt(N, fN(N)) : fN(N)            hint(show $fsqrt_%(%))
def $fceil(N, fN(N)) : fN(N)            hint(show $fceil_%(%))
def $ffloor(N, fN(N)) : fN(N)           hint(show $ffloor_%(%))
def $ftrunc(N, fN(N)) : fN(N)           hint(show $ftrunc_%(%))
def $fnearest(N, fN(N)) : fN(N)         hint(show $fnearest_%(%))
def $feq(N, fN(N), fN(N)) : u32         hint(show $feq_%(%,%))
def $fne(N, fN(N), fN(N)) : u32         hint(show $fne_%(%,%))
def $flt(N, fN(N), fN(N)) : u32         hint(show $flt_%(%,%))
def $fgt(N, fN(N), fN(N)) : u32         hint(show $fgt_%(%,%))
def $fle(N, fN(N), fN(N)) : u32         hint(show $fle_%(%,%))
def $fge(N, fN(N), fN(N)) : u32         hint(show $fge_%(%,%))
def $fpmin(N, fN(N), fN(N)) : fN(N)     hint(show $fpmin_%(%,%))
def $fpmax(N, fN(N), fN(N)) : fN(N)     hint(show $fpmax_%(%,%))


def $binop(inn, ADD, iN_1, iN_2) = $iadd($size(inn), iN_1, iN_2)
def $binop(inn, SUB, iN_1, iN_2) = $isub($size(inn), iN_1, iN_2)
def $binop(inn, MUL, iN_1, iN_2) = $imul($size(inn), iN_1, iN_2)
def $binop(inn, DIV sx, iN_1, iN_2) = $idiv($size(inn), sx, iN_1, iN_2)
def $binop(inn, REM sx, iN_1, iN_2) = $irem($size(inn), sx, iN_1, iN_2)
def $binop(inn, AND, iN_1, iN_2) = $iand($size(inn), iN_1, iN_2)
def $binop(inn, OR, iN_1, iN_2) = $ior($size(inn), iN_1, iN_2)
def $binop(inn, XOR, iN_1, iN_2) = $ixor($size(inn), iN_1, iN_2)
def $binop(inn, SHL, iN_1, iN_2) = $ishl($size(inn), iN_1, iN_2)
def $binop(inn, SHR sx, iN_1, iN_2) = $ishr($size(inn), sx, iN_1, iN_2)
def $binop(inn, ROTL, iN_1, iN_2) = $irotl($size(inn), iN_1, iN_2)
def $binop(inn, ROTR, iN_1, iN_2) = $irotr($size(inn), iN_1, iN_2)
def $unop(inn, CLZ, iN) = $iclz($size(inn), iN)
def $unop(inn, CTZ, iN) = $ictz($size(inn), iN)
def $unop(inn, POPCNT, iN) = $ipopcnt($size(inn), iN)
def $unop(inn, EXTEND N, iN) = $ext(N, $size(inn), S, $wrap($size(inn), N, iN))
def $testop(inn, EQZ, iN) = $ieqz($size(inn), iN)
def $relop(inn, EQ, iN_1, iN_2) = $ieq($size(inn), iN_1, iN_2)
def $relop(inn, NE, iN_1, iN_2) = $ine($size(inn), iN_1, iN_2)
def $relop(inn, LT sx, iN_1, iN_2) = $ilt($size(inn), sx, iN_1, iN_2)
def $relop(inn, GT sx, iN_1, iN_2) = $igt($size(inn), sx, iN_1, iN_2)
def $relop(inn, LE sx, iN_1, iN_2) = $ile($size(inn), sx, iN_1, iN_2)
def $relop(inn, GE sx, iN_1, iN_2) = $ige($size(inn), sx, iN_1, iN_2)

def $binop(fnn, ADD, fN_1, fN_2) = $fadd($size(fnn), fN_1, fN_2)
def $binop(fnn, SUB, fN_1, fN_2) = $fsub($size(fnn), fN_1, fN_2)
def $binop(fnn, MUL, fN_1, fN_2) = $fmul($size(fnn), fN_1, fN_2)
def $binop(fnn, DIV, fN_1, fN_2) = $fdiv($size(fnn), fN_1, fN_2)
def $binop(fnn, MIN, fN_1, fN_2) = $fmin($size(fnn), fN_1, fN_2)
def $binop(fnn, MAX, fN_1, fN_2) = $fmax($size(fnn), fN_1, fN_2)
def $binop(fnn, COPYSIGN, fN_1, fN_2) = $fcopysign($size(fnn), fN_1, fN_2)

def $unop(fnn, ABS, fN) = $fabs($size(fnn), fN)
def $unop(fnn, NEG, fN) = $fneg($size(fnn), fN)
def $unop(fnn, SQRT, fN) = $fsqrt($size(fnn), fN)
def $unop(fnn, CEIL, fN) = $fceil($size(fnn), fN)
def $unop(fnn, FLOOR, fN) = $ffloor($size(fnn), fN)
def $unop(fnn, TRUNC, fN) = $ftrunc($size(fnn), fN)
def $unop(fnn, NEAREST, fN) = $fnearest($size(fnn), fN)

def $relop(fnn, EQ, fN_1, fN_2) = $feq($size(fnn), fN_1, fN_2)
def $relop(fnn, NE, fN_1, fN_2) = $fne($size(fnn), fN_1, fN_2)
def $relop(fnn, LT, fN_1, fN_2) = $flt($size(fnn), fN_1, fN_2)
def $relop(fnn, GT, fN_1, fN_2) = $fgt($size(fnn), fN_1, fN_2)
def $relop(fnn, LE, fN_1, fN_2) = $fle($size(fnn), fN_1, fN_2)
def $relop(fnn, GE, fN_1, fN_2) = $fge($size(fnn), fN_1, fN_2)

def $cvtop(I32, I64, CONVERT, sx, iN) = $ext(32, 64, sx, iN)
def $cvtop(I64, I32, CONVERT, sx?, iN) = $wrap(64, 32, iN)
def $cvtop(fnn, inn, CONVERT, sx, fN) = $trunc($size(fnn), $size(inn), sx, fN)
def $cvtop(fnn, inn, CONVERT_SAT, sx, fN) = $trunc_sat($size(fnn), $size(inn), sx, fN)
def $cvtop(F32, F64, CONVERT, sx?, fN) = $promote(32, 64, fN)
def $cvtop(F64, F32, CONVERT, sx?, fN) = $demote(64, 32, fN)
def $cvtop(inn, fnn, CONVERT, sx, iN) = $convert($size(inn), $size(fnn), sx, iN)
def $cvtop(inn, fnn, REINTERPRET, sx?, iN) = $reinterpret(inn, fnn, iN) -- if $size(inn) = $size(fnn)
def $cvtop(fnn, inn, REINTERPRET, sx?, fN) = $reinterpret(fnn, inn, fN) -- if $size(inn) = $size(fnn)


;; Packed values

def $packnum(lanetype, num_($lunpack(lanetype))) : lane_(lanetype)
    hint(show $pack_(%,%))
def $packnum(numtype, c) = c
def $packnum(packtype, c) = $wrap($size($lunpack(packtype)), $psize(packtype), c)

def $unpacknum(lanetype, lane_(lanetype)) : num_($lunpack(lanetype))
    hint(show $unpack_(%,%))
def $unpacknum(numtype, c) = c
def $unpacknum(packtype, c) = $ext($psize(packtype), $size($lunpack(packtype)), U, c)


;; Vectors

def $lanes_(shape, vec_(V128)) : lane_($lanetype(shape))*
    hint(show $lanes_(%,%))

def $invlanes_(shape, lane_($lanetype(shape))*) : vec_(V128)
    hint(show $lanes^(-1)#_%#(%,%))
def $invlanes_(sh, c*) = vc  -- if c* = $lanes_(sh, vc)

def $halfop(half, nat, nat) : nat
def $halfop(LOW, i, j) = i
def $halfop(HIGH, i, j) = j

;; TODO: return lists for nondeterminism
def $vvunop(vectype, vvunop, vec_(vectype)) : vec_(vectype)
    hint(show %2#_%1#((%3)))
def $vvbinop(vectype, vvbinop, vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#_%1#(%3, %4))
def $vvternop(vectype, vvternop, vec_(vectype), vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#_%1#(%3, %4, %5))

def $vvunop(V128, NOT, v128) = $inot($size(V128), v128)
def $vvbinop(V128, AND, v128_1, v128_2) = $iand($size(V128), v128_1, v128_2)
def $vvbinop(V128, ANDNOT, v128_1, v128_2) = $iandnot($size(V128), v128_1, v128_2)
def $vvbinop(V128, OR, v128_1, v128_2) = $ior($size(V128), v128_1, v128_2)
def $vvbinop(V128, XOR, v128_1, v128_2) = $ixor($size(V128), v128_1, v128_2)
def $vvternop(V128, BITSELECT, v128_1, v128_2, v128_3) = $ibitselect($size(V128), v128_1, v128_2, v128_3)

;; TODO: rename these to mapunop etc?
def $vunop(shape, vunop_(shape), vec_(V128)) : vec_(V128)
    hint(show %2#_%1#((%3)))
def $vbinop(shape, vbinop_(shape), vec_(V128), vec_(V128)) : vec_(V128)*
    hint(show %2#_%1#(%3, %4))
def $vrelop(shape, vrelop_(shape), vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %2#_%1#(%3, %4))
def $vcvtop(shape_1, shape_2, vcvtop, sx?, lane_($lanetype(shape_1))) : lane_($lanetype(shape_2))
    hint(show %3#$_((%1,%2))^(%5)#((%6)))

def $vunop(imm X N, ABS, v128_1) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if v128 = $invlanes_(imm X N, $iabs($lsize(imm), lane_1)*)
def $vunop(imm X N, NEG, v128_1) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if v128 = $invlanes_(imm X N, $ineg($lsize(imm), lane_1)*)
def $vunop(imm X N, POPCNT, v128_1) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if v128 = $invlanes_(imm X N, $ipopcnt($lsize(imm), lane_1)*)

def $vbinop(imm X N, ADD, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $iadd($lsize(imm), lane_1, lane_2)*)
def $vbinop(imm X N, SUB, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $isub($lsize(imm), lane_1, lane_2)*)
def $vbinop(imm X N, MIN sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $imin($lsize(imm), sx, lane_1, lane_2)*)
def $vbinop(imm X N, MAX sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $imax($lsize(imm), sx, lane_1, lane_2)*)
def $vbinop(imm X N, ADD_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $iaddsat($lsize(imm), sx, lane_1, lane_2)*)
def $vbinop(imm X N, SUB_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $isubsat($lsize(imm), sx, lane_1, lane_2)*)
def $vbinop(imm X N, MUL, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $imul($lsize(imm), lane_1, lane_2)*)
def $vbinop(imm X N, AVGR_U, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $iavgr_u($lsize(imm), lane_1, lane_2)*)
def $vbinop(imm X N, Q15MULR_SAT_S, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if v128 = $invlanes_(imm X N, $iq15mulrsat_s($lsize(imm), lane_1, lane_2)*)

def $vrelop(imm X N, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(imm), S, $ieq($lsize(imm), lane_1, lane_2))*
    -- if v128 = $invlanes_(imm X N, lane_3*)
def $vrelop(imm X N, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(imm), S, $ine($lsize(imm), lane_1, lane_2))*
    -- if v128 = $invlanes_(imm X N, lane_3*)
def $vrelop(imm X N, LT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(imm), S, $ilt($lsize(imm), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(imm X N, lane_3*)
def $vrelop(imm X N, GT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(imm), S, $igt($lsize(imm), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(imm X N, lane_3*)
def $vrelop(imm X N, LE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(imm), S, $ile($lsize(imm), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(imm X N, lane_3*)
def $vrelop(imm X N, GE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(imm X N, v128_1)
    -- if lane_2* = $lanes_(imm X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(imm), S, $ige($lsize(imm), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(imm X N, lane_3*)

def $vunop(fnn X N, ABS, v128_1) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if v128 = $invlanes_(fnn X N, $fabs($size(fnn), lane_1)*)
def $vunop(fnn X N, NEG, v128_1) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if v128 = $invlanes_(fnn X N, $fneg($size(fnn), lane_1)*)
def $vunop(fnn X N, SQRT, v128_1) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if v128 = $invlanes_(fnn X N, $fsqrt($size(fnn), lane_1)*)
def $vunop(fnn X N, CEIL, v128_1) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if v128 = $invlanes_(fnn X N, $fceil($size(fnn), lane_1)*)
def $vunop(fnn X N, FLOOR, v128_1) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if v128 = $invlanes_(fnn X N, $ffloor($size(fnn), lane_1)*)
def $vunop(fnn X N, TRUNC, v128_1) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if v128 = $invlanes_(fnn X N, $ftrunc($size(fnn), lane_1)*)
def $vunop(fnn X N, NEAREST, v128_1) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if v128 = $invlanes_(fnn X N, $fnearest($size(fnn), lane_1)*)

def $vbinop(fnn X N, ADD, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fadd($size(fnn), lane_1, lane_2)*)
def $vbinop(fnn X N, SUB, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fsub($size(fnn), lane_1, lane_2)*)
def $vbinop(fnn X N, MUL, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fmul($size(fnn), lane_1, lane_2)*)
def $vbinop(fnn X N, DIV, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fdiv($size(fnn), lane_1, lane_2)*)
def $vbinop(fnn X N, MIN, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fmin($size(fnn), lane_1, lane_2)*)
def $vbinop(fnn X N, MAX, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fmax($size(fnn), lane_1, lane_2)*)
def $vbinop(fnn X N, PMIN, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fpmin($size(fnn), lane_1, lane_2)*)
def $vbinop(fnn X N, PMAX, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(fnn X N, v128_1)
    -- if lane_2* = $lanes_(fnn X N, v128_2)
    -- if v128 = $invlanes_(fnn X N, $fpmax($size(fnn), lane_1, lane_2)*)

def $vrelop(F32 X N, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F32 X N, v128_1)
    -- if lane_2* = $lanes_(F32 X N, v128_2)
    -- if lane_3* = $ext(1, 32, S, $feq(32, lane_1, lane_2))*
    -- if v128 = $invlanes_(I32 X N, lane_3*)
def $vrelop(F32 X N, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F32 X N, v128_1)
    -- if lane_2* = $lanes_(F32 X N, v128_2)
    -- if lane_3* = $ext(1, 32, S, $fne(32, lane_1, lane_2))*
    -- if v128 = $invlanes_(I32 X N, lane_3*)
def $vrelop(F32 X N, LT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F32 X N, v128_1)
    -- if lane_2* = $lanes_(F32 X N, v128_2)
    -- if lane_3* = $ext(1, 32, S, $flt(32, lane_1, lane_2))*
    -- if v128 = $invlanes_(I32 X N, lane_3*)
def $vrelop(F32 X N, GT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F32 X N, v128_1)
    -- if lane_2* = $lanes_(F32 X N, v128_2)
    -- if lane_3* = $ext(1, 32, S, $fgt(32, lane_1, lane_2))*
    -- if v128 = $invlanes_(I32 X N, lane_3*)
def $vrelop(F32 X N, LE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F32 X N, v128_1)
    -- if lane_2* = $lanes_(F32 X N, v128_2)
    -- if lane_3* = $ext(1, 32, S, $fle(32, lane_1, lane_2))*
    -- if v128 = $invlanes_(I32 X N, lane_3*)
def $vrelop(F32 X N, GE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F32 X N, v128_1)
    -- if lane_2* = $lanes_(F32 X N, v128_2)
    -- if lane_3* = $ext(1, 32, S, $fge(32, lane_1, lane_2))*
    -- if v128 = $invlanes_(I32 X N, lane_3*)
def $vrelop(F64 X N, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F64 X N, v128_1)
    -- if lane_2* = $lanes_(F64 X N, v128_2)
    -- if lane_3* = $ext(1, 64, S, $feq(64, lane_1, lane_2))*
    -- if v128 = $invlanes_(I64 X N, lane_3*)
def $vrelop(F64 X N, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F64 X N, v128_1)
    -- if lane_2* = $lanes_(F64 X N, v128_2)
    -- if lane_3* = $ext(1, 64, S, $fne(64, lane_1, lane_2))*
    -- if v128 = $invlanes_(I64 X N, lane_3*)
def $vrelop(F64 X N, LT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F64 X N, v128_1)
    -- if lane_2* = $lanes_(F64 X N, v128_2)
    -- if lane_3* = $ext(1, 64, S, $flt(64, lane_1, lane_2))*
    -- if v128 = $invlanes_(I64 X N, lane_3*)
def $vrelop(F64 X N, GT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F64 X N, v128_1)
    -- if lane_2* = $lanes_(F64 X N, v128_2)
    -- if lane_3* = $ext(1, 64, S, $fgt(64, lane_1, lane_2))*
    -- if v128 = $invlanes_(I64 X N, lane_3*)
def $vrelop(F64 X N, LE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F64 X N, v128_1)
    -- if lane_2* = $lanes_(F64 X N, v128_2)
    -- if lane_3* = $ext(1, 64, S, $fle(64, lane_1, lane_2))*
    -- if v128 = $invlanes_(I64 X N, lane_3*)
def $vrelop(F64 X N, GE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(F64 X N, v128_1)
    -- if lane_2* = $lanes_(F64 X N, v128_2)
    -- if lane_3* = $ext(1, 64, S, $fge(64, lane_1, lane_2))*
    -- if v128 = $invlanes_(I64 X N, lane_3*)

def $vcvtop(I8 X N_1, I16 X N_2, EXTEND, sx, i8) = i16
    -- if i16 = $ext(8, 16, sx, i8)
def $vcvtop(I16 X N_1, I32 X N_2, EXTEND, sx, i16) = i32
    -- if i32 = $ext(16, 32, sx, i16)
def $vcvtop(I32 X N_1, I64 X N_2, EXTEND, sx, i32) = i64
    -- if i64 = $ext(32, 64, sx, i32)
def $vcvtop(F32 X N_1, I32 X N_2, TRUNC_SAT, sx, f32) = i32
    -- if i32 = $trunc_sat(32, 32, sx, f32)
def $vcvtop(F64 X N_1, I32 X N_2, TRUNC_SAT, sx, f64) = i32
    -- if i32 = $trunc_sat(64, 32, sx, f64)
def $vcvtop(I32 X N_1, F32 X N_2, CONVERT, sx, i32) = f32
    -- if f32 = $convert(32, 32, sx, i32)
def $vcvtop(I32 X N_1, F64 X N_2, CONVERT, sx, i32) = f64
    -- if f64 = $convert(32, 64, sx, i32)
def $vcvtop(F64 X N_1, F32 X N_2, DEMOTE, sx, f64) = f32
    -- if f32 = $demote(64, 32, f64)
def $vcvtop(F32 X N_1, F64 X N_2, PROMOTE, sx, f32) = f64
    -- if f64 = $promote(32, 64, f32)

def $vextunop(ishape_1, ishape_2, vextunop_(ishape_1, ishape_2), sx, vec_(V128)) : vec_(V128)
    hint(show %3#$_((%1,%2))^(%5)#((%6)))
def $vextbinop(ishape_1, ishape_2, vextbinop_(ishape_1, ishape_2), sx, vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %3#$_((%1,%2))^(%5)#((%6,%7)))

def $vextbinop(inn_1 X N_1, inn_2 X N_2, DOT, sx, c_1, c_2) = c
  -- var cj_1 : iN($lsize(inn_1))
  -- var cj_2 : iN($lsize(inn_1))
  -- if ci_1* = $lanes_(inn_2 X N_2, c_1)
  -- if ci_2* = $lanes_(inn_2 X N_2, c_2)
  -- if $concat_(iN($lsize(inn_1)), (cj_1 cj_2)*) = $imul($lsize(inn_1), $ext($lsize(inn_2), $lsize(inn_1), S, ci_1), $ext($lsize(inn_2), $lsize(inn_1), S, ci_2))*
  -- if c = $invlanes_(inn_1 X N_1, $iadd($lsize(inn_1), cj_1, cj_2)^N_1)

;; TODO: refactor for consistency?
def $vishiftop(ishape, vshiftop_(ishape), lane_($lanetype(ishape)), u32) : lane_($lanetype(ishape))
    hint(show %2#_%1#(%3, %4))

def $vishiftop(imm X N, SHL, lane, n) = $ishl($lsize(imm), lane, n)
def $vishiftop(imm X N, SHR sx, lane, n) = $ishr($lsize(imm), sx, lane, n)
